def is_safe(board, row, col, n):
    # Check this row on left side
    for i in range(col):
        if board[row][i] == 'Q':
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False

    # Check lower diagonal on left side
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False

    return True

def solve_n_queens_util(board, col, n):
    # If all queens are placed
    if col >= n:
        return True

    # Try placing queen in all rows one by one
    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 'Q'  # Place queen

            # Recur to place rest of queens
            if solve_n_queens_util(board, col + 1, n):
                return True

            # If placing queen here doesn't lead to solution
            # then backtrack
            board[i][col] = '.'  # Remove queen

    return False

def solve_n_queens(n):
    # Initialize empty board
    board = [['.' for _ in range(n)] for _ in range(n)]

    if not solve_n_queens_util(board, 0, n):
        print("No solution exists")
        return

    # Print the board with queens placed
    for row in board:
        print(" ".join(row))

if __name__ == "__main__":
    N = int(input("Enter the value of N (size of the chessboard and number of queens): "))
    solve_n_queens(N)
